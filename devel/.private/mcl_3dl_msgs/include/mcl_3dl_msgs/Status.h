// Generated by gencpp from file mcl_3dl_msgs/Status.msg
// DO NOT EDIT!


#ifndef MCL_3DL_MSGS_MESSAGE_STATUS_H
#define MCL_3DL_MSGS_MESSAGE_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mcl_3dl_msgs
{
template <class ContainerAllocator>
struct Status_
{
  typedef Status_<ContainerAllocator> Type;

  Status_()
    : header()
    , status(0)
    , error(0)
    , convergence_status(0)
    , particle_size(0)
    , match_ratio(0.0)
    , entropy(0.0)  {
    }
  Status_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , status(0)
    , error(0)
    , convergence_status(0)
    , particle_size(0)
    , match_ratio(0.0)
    , entropy(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _status_type;
  _status_type status;

   typedef uint8_t _error_type;
  _error_type error;

   typedef uint8_t _convergence_status_type;
  _convergence_status_type convergence_status;

   typedef uint32_t _particle_size_type;
  _particle_size_type particle_size;

   typedef float _match_ratio_type;
  _match_ratio_type match_ratio;

   typedef float _entropy_type;
  _entropy_type entropy;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NORMAL)
  #undef NORMAL
#endif
#if defined(_WIN32) && defined(GLOBAL_LOCALIZATION)
  #undef GLOBAL_LOCALIZATION
#endif
#if defined(_WIN32) && defined(EXPANSION_RESETTING)
  #undef EXPANSION_RESETTING
#endif
#if defined(_WIN32) && defined(ERROR_NORMAL)
  #undef ERROR_NORMAL
#endif
#if defined(_WIN32) && defined(ERROR_POINTS_NOT_FOUND)
  #undef ERROR_POINTS_NOT_FOUND
#endif
#if defined(_WIN32) && defined(CONVERGENCE_STATUS_NORMAL)
  #undef CONVERGENCE_STATUS_NORMAL
#endif
#if defined(_WIN32) && defined(CONVERGENCE_STATUS_CONVERGED)
  #undef CONVERGENCE_STATUS_CONVERGED
#endif
#if defined(_WIN32) && defined(CONVERGENCE_STATUS_LARGE_STD_VALUE)
  #undef CONVERGENCE_STATUS_LARGE_STD_VALUE
#endif

  enum {
    NORMAL = 0u,
    GLOBAL_LOCALIZATION = 1u,
    EXPANSION_RESETTING = 2u,
    ERROR_NORMAL = 0u,
    ERROR_POINTS_NOT_FOUND = 1u,
    CONVERGENCE_STATUS_NORMAL = 0u,
    CONVERGENCE_STATUS_CONVERGED = 1u,
    CONVERGENCE_STATUS_LARGE_STD_VALUE = 2u,
  };


  typedef boost::shared_ptr< ::mcl_3dl_msgs::Status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mcl_3dl_msgs::Status_<ContainerAllocator> const> ConstPtr;

}; // struct Status_

typedef ::mcl_3dl_msgs::Status_<std::allocator<void> > Status;

typedef boost::shared_ptr< ::mcl_3dl_msgs::Status > StatusPtr;
typedef boost::shared_ptr< ::mcl_3dl_msgs::Status const> StatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mcl_3dl_msgs::Status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mcl_3dl_msgs::Status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mcl_3dl_msgs::Status_<ContainerAllocator1> & lhs, const ::mcl_3dl_msgs::Status_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.status == rhs.status &&
    lhs.error == rhs.error &&
    lhs.convergence_status == rhs.convergence_status &&
    lhs.particle_size == rhs.particle_size &&
    lhs.match_ratio == rhs.match_ratio &&
    lhs.entropy == rhs.entropy;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mcl_3dl_msgs::Status_<ContainerAllocator1> & lhs, const ::mcl_3dl_msgs::Status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mcl_3dl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mcl_3dl_msgs::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcl_3dl_msgs::Status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcl_3dl_msgs::Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcl_3dl_msgs::Status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcl_3dl_msgs::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcl_3dl_msgs::Status_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mcl_3dl_msgs::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f47002d781357aed0b4c4738b39ef49a";
  }

  static const char* value(const ::mcl_3dl_msgs::Status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf47002d781357aedULL;
  static const uint64_t static_value2 = 0x0b4c4738b39ef49aULL;
};

template<class ContainerAllocator>
struct DataType< ::mcl_3dl_msgs::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mcl_3dl_msgs/Status";
  }

  static const char* value(const ::mcl_3dl_msgs::Status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mcl_3dl_msgs::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"# status definitions\n"
"\n"
"uint8 NORMAL = 0\n"
"uint8 GLOBAL_LOCALIZATION = 1\n"
"uint8 EXPANSION_RESETTING = 2\n"
"\n"
"uint8 status\n"
"\n"
"# error definitions\n"
"\n"
"uint8 ERROR_NORMAL = 0\n"
"uint8 ERROR_POINTS_NOT_FOUND = 1\n"
"\n"
"uint8 error\n"
"\n"
"# convergence status definitions\n"
"\n"
"uint8 CONVERGENCE_STATUS_NORMAL = 0\n"
"uint8 CONVERGENCE_STATUS_CONVERGED = 1\n"
"uint8 CONVERGENCE_STATUS_LARGE_STD_VALUE = 2\n"
"\n"
"uint8 convergence_status\n"
"\n"
"uint32 particle_size\n"
"float32 match_ratio\n"
"float32 entropy\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::mcl_3dl_msgs::Status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mcl_3dl_msgs::Status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.status);
      stream.next(m.error);
      stream.next(m.convergence_status);
      stream.next(m.particle_size);
      stream.next(m.match_ratio);
      stream.next(m.entropy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mcl_3dl_msgs::Status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mcl_3dl_msgs::Status_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error);
    s << indent << "convergence_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.convergence_status);
    s << indent << "particle_size: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.particle_size);
    s << indent << "match_ratio: ";
    Printer<float>::stream(s, indent + "  ", v.match_ratio);
    s << indent << "entropy: ";
    Printer<float>::stream(s, indent + "  ", v.entropy);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MCL_3DL_MSGS_MESSAGE_STATUS_H
