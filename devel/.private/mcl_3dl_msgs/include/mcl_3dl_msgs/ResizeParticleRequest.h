// Generated by gencpp from file mcl_3dl_msgs/ResizeParticleRequest.msg
// DO NOT EDIT!


#ifndef MCL_3DL_MSGS_MESSAGE_RESIZEPARTICLEREQUEST_H
#define MCL_3DL_MSGS_MESSAGE_RESIZEPARTICLEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mcl_3dl_msgs
{
template <class ContainerAllocator>
struct ResizeParticleRequest_
{
  typedef ResizeParticleRequest_<ContainerAllocator> Type;

  ResizeParticleRequest_()
    : size(0)  {
    }
  ResizeParticleRequest_(const ContainerAllocator& _alloc)
    : size(0)  {
  (void)_alloc;
    }



   typedef int32_t _size_type;
  _size_type size;





  typedef boost::shared_ptr< ::mcl_3dl_msgs::ResizeParticleRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mcl_3dl_msgs::ResizeParticleRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ResizeParticleRequest_

typedef ::mcl_3dl_msgs::ResizeParticleRequest_<std::allocator<void> > ResizeParticleRequest;

typedef boost::shared_ptr< ::mcl_3dl_msgs::ResizeParticleRequest > ResizeParticleRequestPtr;
typedef boost::shared_ptr< ::mcl_3dl_msgs::ResizeParticleRequest const> ResizeParticleRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mcl_3dl_msgs::ResizeParticleRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mcl_3dl_msgs::ResizeParticleRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mcl_3dl_msgs::ResizeParticleRequest_<ContainerAllocator1> & lhs, const ::mcl_3dl_msgs::ResizeParticleRequest_<ContainerAllocator2> & rhs)
{
  return lhs.size == rhs.size;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mcl_3dl_msgs::ResizeParticleRequest_<ContainerAllocator1> & lhs, const ::mcl_3dl_msgs::ResizeParticleRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mcl_3dl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mcl_3dl_msgs::ResizeParticleRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcl_3dl_msgs::ResizeParticleRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcl_3dl_msgs::ResizeParticleRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcl_3dl_msgs::ResizeParticleRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcl_3dl_msgs::ResizeParticleRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcl_3dl_msgs::ResizeParticleRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mcl_3dl_msgs::ResizeParticleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "97da5de9999c5ce84f539773c8d0b2a3";
  }

  static const char* value(const ::mcl_3dl_msgs::ResizeParticleRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x97da5de9999c5ce8ULL;
  static const uint64_t static_value2 = 0x4f539773c8d0b2a3ULL;
};

template<class ContainerAllocator>
struct DataType< ::mcl_3dl_msgs::ResizeParticleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mcl_3dl_msgs/ResizeParticleRequest";
  }

  static const char* value(const ::mcl_3dl_msgs::ResizeParticleRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mcl_3dl_msgs::ResizeParticleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 size\n"
;
  }

  static const char* value(const ::mcl_3dl_msgs::ResizeParticleRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mcl_3dl_msgs::ResizeParticleRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ResizeParticleRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mcl_3dl_msgs::ResizeParticleRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mcl_3dl_msgs::ResizeParticleRequest_<ContainerAllocator>& v)
  {
    s << indent << "size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MCL_3DL_MSGS_MESSAGE_RESIZEPARTICLEREQUEST_H
